diff --color -rupN xv6-unrc/defs.h xv6-borda-guevara-scheduling/defs.h
--- xv6-unrc/defs.h	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/defs.h	2021-06-03 09:02:54.228997672 -0300
@@ -108,10 +108,12 @@ void            exit(void);
 int             fork(void);
 int             growproc(int);
 int             kill(int);
+int             set_priority(int);
 struct cpu*     mycpu(void);
 struct proc*    myproc();
 void            pinit(void);
 void            procdump(void);
+void            mlfdump(void);
 void            scheduler(void) __attribute__((noreturn));
 void            sched(void);
 void            setproc(struct proc*);
diff --color -rupN xv6-unrc/Makefile xv6-borda-guevara-scheduling/Makefile
--- xv6-unrc/Makefile	2021-04-15 12:50:04.000000000 -0300
+++ xv6-borda-guevara-scheduling/Makefile	2021-06-03 09:02:54.228997672 -0300
@@ -171,6 +171,7 @@ UPROGS=\
 	_cat\
 	_echo\
 	_forktest\
+	_forkagingtest\
 	_grep\
 	_init\
 	_kill\
diff --color -rupN xv6-unrc/param.h xv6-borda-guevara-scheduling/param.h
--- xv6-unrc/param.h	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/param.h	2021-06-03 09:02:54.228997672 -0300
@@ -11,4 +11,6 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
-
+#define MLFLEVELS    4  // levels of the mlf
+#define OLDTICKS     10 // all process with more ticks than this in runnable, is considered old
+#define AGEPOLICY    100 // period between the aging function launching
diff --color -rupN xv6-unrc/proc.c xv6-borda-guevara-scheduling/proc.c
--- xv6-unrc/proc.c	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/proc.c	2021-06-03 09:02:54.232997645 -0300
@@ -6,12 +6,121 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+// Define if a queue is empty
+#define isempty(queue) (queue)->head == 0
+// Define if a process is old
+#define isold(proc) ((ticks - ((proc) -> timerunnable)) >= OLDTICKS)
+
+// MLF level structure
+struct queue {
+  struct proc* head;
+  struct proc* last;
+};
 
+// Make a given process runnable and enqueues in
+// a level of the MLF
+void
+makerunnable(struct queue* level, struct proc* proc)
+{ 
+  proc->timerunnable = ticks;
+  proc->state = RUNNABLE;
+
+  if (isempty(level)) {
+    level->head = proc;
+    level->last = proc; 
+  }
+  else {
+    (level->last)->next = proc;
+    level->last = proc;   
+  }
+  proc->next = 0; 
+}
+
+
+// Dequeues a element of a given level
+// of the MLF, must be called with a
+// non-empty queue.
+struct proc*
+dequeue(struct queue* level)
+{
+  if (isempty(level)) {
+    panic("attempted to get a process from empty queue\n");
+  }
+  else {
+    struct proc* p = level->head;
+    level->head = p -> next;
+    p->next = 0;
+    // If the next process of the head is 0 (null)
+    // the queue has only 1 element
+    if (level->head == 0)
+      level->last = 0;
+    if (p->state != RUNNABLE){
+      mlfdump();
+      panic("non-runnable process in the queues\n");
+    }
+    return p;
+  }
+  return 0;
+}
+
+
+// MLF
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
+  struct queue level[MLFLEVELS];
 } ptable;
 
+void
+elevateoldprocess(struct proc* prev, struct proc* p)
+{
+  prev->next = p->next;
+  if (p->level > 0)
+    p->level--;
+  makerunnable(&ptable.level[p->level], p);
+}
+
+
+// Identifies all the old process in a level
+// and moves them to a bigger level of priority
+void
+agelevel(struct queue* level)
+{
+  if (isempty(level))
+    return;
+
+  struct proc* proc = level -> head;
+
+  while (isold(proc) && !isempty(level)) {
+    proc = dequeue(level);
+    if (proc->level > 0)
+      proc->level--;
+    makerunnable(&ptable.level[proc->level], proc);
+  }
+  
+  if (!isempty(level)) {
+    while (proc->next) {
+      if (isold(proc->next)) {
+        elevateoldprocess(proc, proc->next);
+      }
+      else {
+        proc = proc->next;
+      }
+    }
+    level->last = proc;
+  }
+}
+
+// Ages all the levels of the MLF
+void
+agingmlf() 
+{
+  for (ushort i = 1; i < MLFLEVELS; i++){
+    agelevel(&ptable.level[i]);
+  }
+}
+
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -88,6 +197,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->level = 0;
 
   release(&ptable.lock);
 
@@ -124,8 +234,8 @@ userinit(void)
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
   initproc = p;
+  p -> level = 0;
   if((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
@@ -148,7 +258,7 @@ userinit(void)
   // because the assignment might not be atomic.
   acquire(&ptable.lock);
 
-  p->state = RUNNABLE;
+  makerunnable(&ptable.level[p->level], p);
 
   release(&ptable.lock);
 }
@@ -214,7 +324,8 @@ fork(void)
 
   acquire(&ptable.lock);
 
-  np->state = RUNNABLE;
+  np->level = curproc->level;
+  makerunnable(&ptable.level[np->level], np);
 
   release(&ptable.lock);
 
@@ -322,36 +433,39 @@ wait(void)
 void
 scheduler(void)
 {
-  struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
   for(;;){
     // Enable interrupts on this processor.
-    sti();
+    sti(); 
 
-    // Loop over process table looking for process to run.
+    // Loops over the levels of the MLF
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+    if (ticks % AGEPOLICY == 0)
+      agingmlf();
+    for (ushort i = 0; i < MLFLEVELS; i++){
+      
+      if (isempty(&ptable.level[i])) 
         continue;
-
+      struct proc* p = dequeue(&ptable.level[i]);
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
+      p->remainingticks = (p->level)+1;
       switchuvm(p);
       p->state = RUNNING;
-
+      
+      // Black hole
       swtch(&(c->scheduler), p->context);
       switchkvm();
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      break;
     }
     release(&ptable.lock);
-
   }
 }
 
@@ -386,7 +500,12 @@ void
 yield(void)
 {
   acquire(&ptable.lock);  //DOC: yieldlock
-  myproc()->state = RUNNABLE;
+  // As the process used all of his quantum,
+  // increases his priority, if already in
+  // max priority, stays were it is.
+  if (myproc()->level < MLFLEVELS-1)
+    (myproc()->level)++;
+  makerunnable(&ptable.level[myproc()->level], myproc());
   sched();
   release(&ptable.lock);
 }
@@ -460,8 +579,12 @@ wakeup1(void *chan)
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
-      p->state = RUNNABLE;
+    if(p->state == SLEEPING && p->chan == chan){
+      if(p->level > 0)  
+        p->level--;
+      makerunnable(&ptable.level[p ->level], p);
+    }
+      
 }
 
 // Wake up all processes sleeping on chan.
@@ -486,8 +609,10 @@ kill(int pid)
     if(p->pid == pid){
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-        p->state = RUNNABLE;
+      if(p->state == SLEEPING) {
+        p->level = 0;
+        makerunnable(&ptable.level[p -> level], p);
+      }
       release(&ptable.lock);
       return 0;
     }
@@ -496,6 +621,16 @@ kill(int pid)
   return -1;
 }
 
+int
+set_priority(int priority)
+{
+  if(priority >= 0 && priority < MLFLEVELS) {
+    myproc()->level = priority;
+    return 0;
+  }
+  return -1;
+}
+
 //PAGEBREAK: 36
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
@@ -523,7 +658,7 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("%d %s %s %d", p->pid, state, p->name, p->level);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
@@ -532,3 +667,30 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+
+void
+mlfdump()
+{
+  static char *states[] = {
+  [UNUSED]    "unused",
+  [EMBRYO]    "embryo",
+  [SLEEPING]  "sleep ",
+  [RUNNABLE]  "runble",
+  [RUNNING]   "run   ",
+  [ZOMBIE]    "zombie"
+  };
+  int i;
+  for(i=0; i<MLFLEVELS; i++){
+    cprintf("Level: %d\n", i);
+    struct proc* curr = ptable.level[i].head;
+    while(curr->next) {
+      cprintf("PID: %d, STATE: %s, NAME: %s", curr->pid, states[curr->state], curr->name);
+      curr = curr->next;
+    }
+    cprintf("\n");
+  }
+}
+ 
+
+
diff --color -rupN xv6-unrc/proc.h xv6-borda-guevara-scheduling/proc.h
--- xv6-unrc/proc.h	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/proc.h	2021-06-03 09:02:54.232997645 -0300
@@ -36,6 +36,10 @@ enum procstate { UNUSED, EMBRYO, SLEEPIN
 
 // Per-process state
 struct proc {
+  ushort remainingticks;       // Remaining ticks of this process in cpu (if in cpu)
+  ushort level;                // The level of the process in MLF
+  uint timerunnable;           // Time when the process became runnable
+  struct proc *next;           // Next process in MLF
   uint sz;                     // Size of process memory (bytes)
   pde_t* pgdir;                // Page table
   char *kstack;                // Bottom of kernel stack for this process
diff --color -rupN xv6-unrc/spinlock.c xv6-borda-guevara-scheduling/spinlock.c
--- xv6-unrc/spinlock.c	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/spinlock.c	2021-05-23 10:21:00.356419089 -0300
@@ -25,7 +25,7 @@ void
 acquire(struct spinlock *lk)
 {
   pushcli(); // disable interrupts to avoid deadlock.
-  if(holding(lk))
+  if(holding(lk)) 
     panic("acquire");
 
   // The xchg is atomic.
diff --color -rupN xv6-unrc/syscall.c xv6-borda-guevara-scheduling/syscall.c
--- xv6-unrc/syscall.c	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/syscall.c	2021-06-03 09:02:54.232997645 -0300
@@ -103,6 +103,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_set_priority(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +127,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_set_priority] sys_set_priority,
 };
 
 void
diff --color -rupN xv6-unrc/syscall.h xv6-borda-guevara-scheduling/syscall.h
--- xv6-unrc/syscall.h	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/syscall.h	2021-06-03 09:02:54.232997645 -0300
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_set_priority 22
diff --color -rupN xv6-unrc/sysproc.c xv6-borda-guevara-scheduling/sysproc.c
--- xv6-unrc/sysproc.c	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/sysproc.c	2021-06-03 09:02:54.232997645 -0300
@@ -89,3 +89,11 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_set_priority(void) 
+{
+  int priority;
+  argint(0,&priority);
+  return set_priority(priority);
+}
diff --color -rupN xv6-unrc/trap.c xv6-borda-guevara-scheduling/trap.c
--- xv6-unrc/trap.c	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/trap.c	2021-05-27 11:44:26.822271542 -0300
@@ -103,7 +103,7 @@ trap(struct trapframe *tf)
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
+     tf->trapno == T_IRQ0+IRQ_TIMER && myproc()->remainingticks-- == 0)
     yield();
 
   // Check if the process has been killed since we yielded
diff --color -rupN xv6-unrc/user/forkagingtest.c xv6-borda-guevara-scheduling/user/forkagingtest.c
--- xv6-unrc/user/forkagingtest.c	1969-12-31 21:00:00.000000000 -0300
+++ xv6-borda-guevara-scheduling/user/forkagingtest.c	2021-05-27 22:58:45.125289378 -0300
@@ -0,0 +1,53 @@
+// Test that fork fails gracefully.
+// Tiny executable so that the limit can be filling the proc table.
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#define N  1000
+
+
+
+void
+forkagingtest(void)
+{
+  int n, pid;
+  
+    
+  printf(1, "fork aging test\n");
+  n = fork();
+  if (n) {
+    pid = fork();
+    if (pid) {
+      set_priority(3);
+      sleep(10);
+      set_priority(3);
+      printf(1, "fork aging test OK\n");
+      kill(n);
+      kill(pid);
+      wait();
+      wait();
+      exit();
+    }
+    else {
+      set_priority(0);
+      for (;;) {
+        set_priority(0);
+      }
+    }
+  }
+  else {
+    set_priority(0);
+    for (;;) {
+      set_priority(0);
+    }
+  } 
+}
+
+int
+main(void)
+{
+  forkagingtest();
+  exit();
+}
diff --color -rupN xv6-unrc/user/param.h xv6-borda-guevara-scheduling/user/param.h
--- xv6-unrc/user/param.h	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/user/param.h	2021-06-03 09:02:54.228997672 -0300
@@ -11,4 +11,6 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
-
+#define MLFLEVELS    4  // levels of the mlf
+#define OLDTICKS     10 // all process with more ticks than this in runnable, is considered old
+#define AGEPOLICY    100 // period between the aging function launching
diff --color -rupN xv6-unrc/user/stressfs.c xv6-borda-guevara-scheduling/user/stressfs.c
--- xv6-unrc/user/stressfs.c	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/user/stressfs.c	2021-05-20 11:52:24.665558551 -0300
@@ -23,10 +23,12 @@ main(int argc, char *argv[])
   printf(1, "stressfs starting\n");
   memset(data, 'a', sizeof(data));
 
-  for(i = 0; i < 4; i++)
+  for(i = 0; i < 4; i++){
     if(fork() > 0)
       break;
-
+    int res = set_priority(i);
+    printf(1,"Result syscall %d : %d\n", i, res);
+  }
   printf(1, "write %d\n", i);
 
   path[8] += i;
diff --color -rupN xv6-unrc/user/syscall.h xv6-borda-guevara-scheduling/user/syscall.h
--- xv6-unrc/user/syscall.h	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/user/syscall.h	2021-06-03 09:02:54.232997645 -0300
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_set_priority 22
diff --color -rupN xv6-unrc/user/user.h xv6-borda-guevara-scheduling/user/user.h
--- xv6-unrc/user/user.h	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/user/user.h	2021-06-03 09:02:54.236997617 -0300
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int set_priority(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --color -rupN xv6-unrc/user/usys.S xv6-borda-guevara-scheduling/user/usys.S
--- xv6-unrc/user/usys.S	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/user/usys.S	2021-06-03 09:02:54.236997617 -0300
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(set_priority)
diff --color -rupN xv6-unrc/user/x86.h xv6-borda-guevara-scheduling/user/x86.h
--- xv6-unrc/user/x86.h	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/user/x86.h	2021-05-27 13:26:56.819407917 -0300
@@ -144,6 +144,12 @@ lcr3(uint val)
   asm volatile("movl %0,%%cr3" : : "r" (val));
 }
 
+static inline void
+halt()
+{
+  asm volatile("hlt");
+}
+
 //PAGEBREAK: 36
 // Layout of the trap frame built on the stack by the
 // hardware and by trapasm.S, and passed to trap().
diff --color -rupN xv6-unrc/x86.h xv6-borda-guevara-scheduling/x86.h
--- xv6-unrc/x86.h	2019-03-29 19:03:20.000000000 -0300
+++ xv6-borda-guevara-scheduling/x86.h	2021-05-27 13:26:56.819407917 -0300
@@ -144,6 +144,12 @@ lcr3(uint val)
   asm volatile("movl %0,%%cr3" : : "r" (val));
 }
 
+static inline void
+halt()
+{
+  asm volatile("hlt");
+}
+
 //PAGEBREAK: 36
 // Layout of the trap frame built on the stack by the
 // hardware and by trapasm.S, and passed to trap().
